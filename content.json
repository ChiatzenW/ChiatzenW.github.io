{"pages":[{"title":"About","text":"i breathed my sighs and moans haphazard-wise. Edmon RostandCyrano de Bergerrac Act II Scene 10 Second year CS student at University of Toronto Linux user (Manjaro) Languages: Mandarin (native) English (fluent) Japanese (塞式翻译法) German (Poopenfarten) Doomed by the authotarian laws of the universe to complete failure(?) likes Pushkin, shawarma, cold beer, diet coke and stuff atama waru waru","link":"/about/index.html"}],"posts":[{"title":"apparently follow.it uses wordpress","text":"While setting up follow.it for this site I tried to do this:Apparently they uses wordpressThough it was pretty cool but maybe not.","link":"/2022/03/14/apparently-follow-it-uses-wordpress/"},{"title":".config files&#39; icon is always windows in VScode","text":"Trying to modify i3 config with Vscode and noticed the icon for .config files is the Windows logo. Thought it was pretty funny as I was working on a linux machine.","link":"/2022/03/14/funnies-vscode-config-icon-always-windows/"},{"title":"Key ideas on proving BFS gives the shortest path on unweighted undirected graphs","text":"Basically some gists from http://www.cs.toronto.edu/~krueger/csc263h/lectures/BFS.pdf. 123graph TD; S--&gt;U; U--&gt;V; $d$: depth from root$\\delta$: shortest path from root Prove by contradiction:$v$: closest node ( to $s$) where $d[v]\\neq \\delta(s,v)$.$u$: the “predecessor” of $d$ on one of the shortest paths from $s$ to $v$.Statement to contradict with : since predecessor, $\\delta(s,u)+1=\\delta(s,v)$. since $v$ closest and $u$ closer, $d[v]=\\delta(s,u)$. from definition $d[v]\\neq \\delta(s,v)$. therefore $d[v]\\neq \\delta(s,v)=\\delta(s,u)+1$ since $d[v]$ is some kind of a path, and $\\delta(s,v)$ is the shortest path by definition, $d[v]\\geq \\delta(s,v)$. Combine last 2 step and $d[v]&gt;d[u]+1$. Remark: basically deduce that between reaching the predecessor on shortest path and the vertex, the BFS visits at least 2 other nodes. Three cases: $v$ not discovered:then $d[v]=d[u]+1$ since we will go to $v$ when exploring $u$’s neibours. $v$ is discovered and explored:Then it is enqued before $u$ thus $d[v]\\leq d[u]$1 $v$ discovered but not fully exploredTake the node that discovered $v$, this node is explored before $u$so by it is enqueued before $u$1 $d[w]\\leq d[u]$. Since $v$ discovered by $w$, $d[v]=d[w]+1\\leq d[u]+1$ Remark: the depth difference between $u$ and $v$ can’t be greater than 1 because we would explore all neighbours thus depth difference bettween neightbours cant be greater than $1$; and we know $u$ and $v$ have to be neighbours. Anyway the contradiction proof in other 2 cases uses property1 but it is pretty intuitive that the depth difference can only be smaller. 1.at any time if $v$ is enqueud after $u$ then $d(v)\\geq d(u)$ Proof: use induction.↩","link":"/2022/03/14/Key-ideas-on-proving-BFS-gives-the-shortest-path-on-unweighted-undirected-graphs/"},{"title":"short story 练习1","text":"很久之前写的， 而且只写了开头， 以前在jerkyll建的blog上，正好看见了就搬过来。 有时间并且想的话可能继续写下去，反正故事大体已经定了，，， 在我大概高二高三的时候, 与我所有那些总是忙忙碌碌的可怜同学们不同, 我度过了一段十分悠闲的时光. 这其中大概有一部分我已经放弃了升入任何一所正经大学的原因在. 那时我主要的时程包括试图用刺耳的口哨惊醒一窝在柳树上筑巢的麻雀, 用剥落的树皮或石片在水泥台阶上刻出一道道痕迹, 以及爬上校园里几乎太多的石灰矮墙来窥探教室里埋头读书的我的苦命的同学们无福消受的各式景色. 在我确实在教室的极少数时间内, 我大多数时间都在外头观察窗外一棵显然对这一切和我一样满不在乎的石榴树. 在我的印象里, 这棵石榴树始终都在结果的季节, 如果撑着窗框站起来看下去, 总是能看到无数石榴烈士摔的粉身碎骨的尸体. 这棵石榴树就是这样既不在乎季节也不在乎会给扫地阿姨和无数要穿过这条小径的师生们带来多少麻烦的自顾自地结着果子. 因为水泥地的裂缝已经浸透了这些可怜果实的汁液, 即使有人把这些多半未熟的尸体扫去了, 不知道扔到哪里去了, 这些光秃秃的地面也还是会引来勤劳的蚂蚁部族. 这些蚂蚁里的工兵试图咬裂我们水泥铸造的大地的外衣, 用这些带着石榴汁液的石块养育他们地底的社会. 蚂蚁是多么勤劳啊, 但我面对他们也不因自己的游手好闲而感到汗颜. 我对我的生活相当满意, 但它还只能算是一段经历, 而不能算作是一段故事—-故事是最起码要有两个人的, 最好还要有个女人. 为了让我的这段经历变成一个还能算合格的故事, 我们还需要引入我的朋友,K. 我是在","link":"/2022/03/15/short-story%E7%BB%83%E4%B9%A01/"},{"title":"Remeber how BFS checks if node is unexplored","text":"I keep forgetting how BFS checks if the node is unexplored.Like sometimes I just forget about it and turn it into a DFS and when I rememmber I want to check if the node is in the queue.Just remember you only go down a row when you are down with the current rowSeriously why can’t I remember this.","link":"/2022/03/14/white/"}],"tags":[{"name":"random thoughts","slug":"random-thoughts","link":"/tags/random-thoughts/"},{"name":"funnies","slug":"funnies","link":"/tags/funnies/"},{"name":"random thoguhts","slug":"random-thoguhts","link":"/tags/random-thoguhts/"},{"name":"BFS","slug":"BFS","link":"/tags/BFS/"},{"name":"proofs","slug":"proofs","link":"/tags/proofs/"},{"name":"short story","slug":"short-story","link":"/tags/short-story/"}],"categories":[{"name":"shorts","slug":"shorts","link":"/categories/shorts/"},{"name":"academics","slug":"academics","link":"/categories/academics/"},{"name":"拆腻子","slug":"拆腻子","link":"/categories/%E6%8B%86%E8%85%BB%E5%AD%90/"},{"name":"algorithms","slug":"academics/algorithms","link":"/categories/academics/algorithms/"},{"name":"写作练习","slug":"拆腻子/写作练习","link":"/categories/%E6%8B%86%E8%85%BB%E5%AD%90/%E5%86%99%E4%BD%9C%E7%BB%83%E4%B9%A0/"},{"name":"CSC263","slug":"academics/algorithms/CSC263","link":"/categories/academics/algorithms/CSC263/"},{"name":"短故事","slug":"拆腻子/写作练习/短故事","link":"/categories/%E6%8B%86%E8%85%BB%E5%AD%90/%E5%86%99%E4%BD%9C%E7%BB%83%E4%B9%A0/%E7%9F%AD%E6%95%85%E4%BA%8B/"}]}